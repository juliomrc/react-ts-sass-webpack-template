/* eslint-disable @typescript-eslint/no-var-requires */
const PolyfillInjectorPlugin = require("webpack-polyfill-injector");
const FaviconsWebpackPlugin = require("favicons-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const StylelintPlugin = require("stylelint-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");
const webpack = require("webpack");

const fileName = (extension, dev) => {
    if (dev) {
        return `[name].bundle.${extension}`;
    }
    return `[name].[contenthash].bundle.${extension}`;
};

const getPlugins = (dev) => {
    const plugins = [
        new MiniCssExtractPlugin({
            filename: fileName("css", dev),
            chunkFilename: fileName("css", dev),
        }),
        new HtmlWebpackPlugin({
            template: "index.html",
        }),
        new FaviconsWebpackPlugin({
            logo: path.resolve(__dirname, "src/resources/icons/react.svg"),
            prefix: "favicon/",
        }),
        new webpack.WatchIgnorePlugin([/\.d\.ts$/]),
        new PolyfillInjectorPlugin({
            singleFile: true,
            polyfills: [
                "Promise",
                "fetch",
                "Array.prototype.find",
                "Array.prototype.findIndex",
                "Array.prototype.fill",
                "String.prototype.startsWith",
                "String.prototype.endsWith",
                "String.prototype.includes",
                "String.prototype.repeat",
                "WebAnimations",
            ],
        }),
    ];

    if (dev) {
        plugins.push(
            new webpack.SourceMapDevToolPlugin({
                filename: "[file].map",
                exclude: [/vendors.*.*/, /polyfills.*/, /runtime.*/],
            }),
        );
    } else {
        plugins.push(new StylelintPlugin());
    }

    return plugins;
};

const getModuleRules = (dev) => {
    const jsTsLoaders = dev
        ? [{ loader: "babel-loader" }]
        : [{ loader: "babel-loader" }, "eslint-loader"];

    return [
        {
            test: /\.(js|ts(x?))$/,
            exclude: /node_modules/,
            use: jsTsLoaders,
        },
        {
            test: /\.(scss|sass|css)$/,
            exclude: /node_modules/,
            loaders: [
                {
                    loader: MiniCssExtractPlugin.loader,
                    options: {
                        hmr: dev ? true : false,
                    },
                },
                {
                    loader: "@teamsupercell/typings-for-css-modules-loader",
                    options: {
                        banner:
                            "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!",
                        disableLocalsExport: true,
                    },
                },
                {
                    loader: "css-loader",
                    options: {
                        modules: true,
                    },
                },
                "sass-loader",
            ],
        },
        {
            test: /\.svg$/,
            use: [
                {
                    loader: "babel-loader",
                },
                {
                    loader: "react-svg-loader",
                    options: {
                        jsx: true,
                    },
                },
            ],
        },
        {
            test: /\.(png|jpe?g|gif|ico)$/i,
            use: [
                {
                    loader: "file-loader",
                    options: {
                        limit: 1,
                        name: "[name].[ext]",
                        outputPath: "assets",
                    },
                },
            ],
        },
    ];
};

module.exports = {
    getPlugins,
    fileName,
    getModuleRules,
};
