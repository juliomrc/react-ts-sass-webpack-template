/* eslint-disable @typescript-eslint/no-var-requires */
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const StylelintPlugin = require("stylelint-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");

module.exports = (env) => {
    const dev = env === "dev";

    const fileName = (extension) => {
        if (dev) {
            return `[name].bundle.${extension}`;
        }
        return `[name].[contenthash].bundle.${extension}`;
    };

    const jsTsLoaders = dev
        ? [{ loader: "babel-loader" }]
        : [{ loader: "babel-loader" }, "eslint-loader"];

    return {
        devtool: dev ? "eval-source-map" : "source-map",
        mode: dev ? "development" : "production",
        context: path.resolve(__dirname),
        entry: {
            app: "./src/boot.tsx",
        },
        output: {
            filename: fileName("js"),
            chunkFilename: fileName("js"),
            sourceMapFilename: "[file].map",
            path: path.resolve(__dirname, "dist"),
            publicPath: "/",
        },
        resolve: {
            extensions: [".js", ".ts", ".tsx"],
            alias: {
                "react-dom": "@hot-loader/react-dom",
                "@components": path.join(__dirname, "./src/components"),
            },
        },
        optimization: {
            moduleIds: "hashed",
            runtimeChunk: "single",
            splitChunks: {
                cacheGroups: {
                    chunks: "all",
                    vendor: {
                        test: /[\\/]node_modules[\\/]/,
                        name: "vendors",
                        chunks: "all",
                    },
                },
            },
        },
        plugins: [
            new MiniCssExtractPlugin({
                filename: fileName("css"),
                chunkFilename: fileName("css"),
            }),
            new StylelintPlugin(),
            new HtmlWebpackPlugin({ template: "index.html" }),
        ],
        module: {
            rules: [
                {
                    test: /\.(js|ts(x?))$/,
                    exclude: /node_modules/,
                    use: jsTsLoaders,
                },
                {
                    test: /\.(scss|sass|css)$/,
                    exclude: /node_modules/,
                    loaders: [
                        {
                            loader: MiniCssExtractPlugin.loader,
                            options: {
                                hmr: dev ? true : false,
                            },
                        },
                        {
                            loader:
                                "@teamsupercell/typings-for-css-modules-loader",
                            options: {
                                banner:
                                    "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!",
                                disableLocalsExport: true,
                            },
                        },
                        {
                            loader: "css-loader",
                            options: {
                                modules: true,
                            },
                        },
                        "sass-loader",
                    ],
                },
            ],
        },
    };
};
