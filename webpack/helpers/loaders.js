/* eslint-disable @typescript-eslint/no-var-requires */
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const getJsTsLoaders = (isDevelopment) => {
    const jsTsLoaders = isDevelopment
        ? [{ loader: "babel-loader" }]
        : [{ loader: "babel-loader" }, "eslint-loader"];

    return {
        test: /\.(js|ts(x?))$/,
        exclude: /node_modules/,
        use: jsTsLoaders,
    };
};

const styleLoaders = (isDevelopment) => ({
    test: /\.(scss|sass|css)$/,
    exclude: /node_modules/,
    loaders: [
        {
            loader: MiniCssExtractPlugin.loader,
            options: {
                hmr: isDevelopment ? true : false,
            },
        },
        {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
                banner:
                    "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!",
                disableLocalsExport: true,
            },
        },
        {
            loader: "css-loader",
            options: {
                modules: true,
            },
        },
        "sass-loader",
    ],
});

const fontLoaders = {
    test: /\.(woff(2)?|ttf|eot)(\?v=\d+\.\d+\.\d+)?$/,
    use: [
        {
            loader: "file-loader",
            options: {
                limit: 10000,
                mimetype: "application",
                name: "[name].[ext]",
                outputPath: "fonts",
            },
        },
    ],
};

const svgLoaders = {
    test: /\.svg$/,
    use: [
        {
            loader: "babel-loader",
        },
        {
            loader: "react-svg-loader",
            options: {
                jsx: true,
            },
        },
    ],
};

const imageLoaders = {
    test: /\.(png|jpe?g|gif|ico)$/i,
    use: [
        {
            loader: "file-loader",
            options: {
                limit: 1,
                name: "[name].[ext]",
                outputPath: "assets",
            },
        },
    ],
};

const getModuleLoaders = (isDevelopment) => {
    return [
        {
            ...getJsTsLoaders(isDevelopment),
        },
        {
            ...styleLoaders(isDevelopment),
        },
        {
            ...fontLoaders,
        },
        {
            ...svgLoaders,
        },
        {
            ...imageLoaders,
        },
    ];
};

module.exports = {
    getJsTsLoaders,
    styleLoaders,
    fontLoaders,
    imageLoaders,
    getModuleLoaders,
};
